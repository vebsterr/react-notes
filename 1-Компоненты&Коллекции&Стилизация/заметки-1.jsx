//! Основное
// @ Запуск Реакт проекта через их оффициальную настройку
// npx create-react-app my-app

// % Все что находится в папке public - не проходит через Webpack
// % Нельзя рендерить пустую разметку(нужно по условию)

// ! Этапы работы с реактом
// % 1.Определяем на какие компоненты можно разбить макет и называем их
// % 2.Определяем какие у компонентов будут пропсы и называем их (пропс: тип пропса)
// % 3.Садимся писать код

// % Тип экспорта должен быть одинаковым на всем проекте

// @ ---------------------------------------------

//! 1.Элементы (Варианты создания)

// @ Через реакт
// const element = React.createElement('ul', { a: 1, b: 'baloo' }, ['li', 'li', 'li'])

// @ Через JSX
// const element = (
//    <ul a='1' b='baloo'>
//       <li></li>
//       <li></li>
//       <li></li>
//    </ul>
// )

// @ ---------------------------------------------

//! 2. Рендер элементов
// import ReactDOM from 'react-dom/client'

// 1. Определяем куда рендерить
// 2. Определяем что рендерить
// ReactDOM.createRoot(document.getElementById('root')).render(container)

// % рендерим самый высокий елемент, он подтянет за собой все остальные

// @ ---------------------------------------------

//! 3. Компоненты
// % Называем только с большой буквы (если с маленькой, JSX думает что это строка и делает такой тег)

// % Внутри файла компонента мы обьявляем компонент, его пропсы. А пропсы с информацией он получает там где он рендерится
// function Painting(props) {
//    const { item1, item2, item3 } = dataObj
//    return (
//       <ul>
//          <li>{item1}</li>
//          <li>{item2}</li>
//          <li>{item3}</li>
//       </ul>
//    )
// }

// @ Рендер компонента
// % В рендере, значения a, b, c передаются в параметр props компонента и дальше через "." можно достучатся к каждому из них
// ReactDOM.createRoot(document.getElementById('root')).render(<Painting a={5} b='5' c={2 + 2} />)

// @ ---------------------------------------------

// ! Структура дерева
// % Рендер в index.js вызывается только для файла App.js, он является верхним компонентом в иерархии

// @ ---------------------------------------------

// ! Дефолтные значения
// % Обьявление дефолтных значений задача компонента а не пропса
// import defaultPhoto from './default.jpg'

// Если с бекенда не пришла инфа, можно поставить значение по умолчанию
// const Painting = ({ url = defaultPhoto, title, profileUrl, author = 'Не известно', price }) => {
//    return (
//       <div>
//          <img src={url} alt={title} />
//          <h2>{title}</h2>
//          <p>
//             Автор: <a href={author.url}>{author.tag}</a>
//          </p>
//          <p>Цена {price} кредитов</p>
//          <p>Доступность: Заканчивается или есть в наличии</p>
//          <button></button>
//       </div>
//    )
// }

// @ ---------------------------------------------

// ! Строгий режим
// % В начальном файле index.js можно удалить все кроме строгого режима
// const root = ReactDOM.createRoot(document.getElementById('root'))
// root.render(
//    <React.StrictMode>
//       <App />
//    </React.StrictMode>
// )

// @ ---------------------------------------------

//! PropTypes
// @ Проверка на типизацию
// import propTypes from 'prop-types'

// const Painting = ({ url = defaultPhoto, title, profileUrl, author = 'Не известно', price }) => {
//    return (
//       <div>
//          <img src={url} alt={title} />
//          <h2>{title}</h2>
//          <p>
//             Автор: <a href={author.url}>{author.tag}</a>
//          </p>
//          <p>Цена {price} кредитов</p>
//          <p>Доступность: Заканчивается или есть в наличии</p>
//          <button></button>
//       </div>
//    )
// }

// % isRequired значит, что данный пропс есть обязательным
// Painting.propTypes = {
//    imageUrl: PropTypes.string.isRequired,
//    title: PropTypes.string.isRequired,
//    profileUrl: PropTypes.string.isRequired,
//    author: PropTypes.string.isRequired,
//    price: PropTypes.number.isRequired,
//    quantity: PropTypes.number.isRequired,
// }

// % Это значит что в пропсе items должен быть массив объектов в которых будет обязательный пропс строка "id"
// items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string.isRequired })),

// @ ---------------------------------------------

//! Рендер по условию

// const isOnline = false
// // 1.Если значение true - вернет значение 'онлайн'
// // 2.Если значение true - вернет 'онлайн', если false - вернет 'НЕ онлайн'
// const Component = props => {
//    return (
//       <ul>
//          <li>{isOnline && 'Онлайн'}</li>
//          <li>{isOnline ? 'Онлайн' : 'НЕ онлайн'}</li>
//       </ul>
//    )
// }

// % false, null, undefined - НЕ рендерятся

// @ ---------------------------------------------

// ! Работа с массивами (создание разметки)
// const Component = props => {
//    return [1, 2, 3, 4, 5].map(el => <div>{el}</div>)
// }

// @ ---------------------------------------------

// ! Ключи компонентов (свойство key='' в обьекте компонента)
// % Если не поставить, реакт не будет видеть разницу между елементами(например li) и будет при удалении/добавлении перерисовывать все елементы вместо одного
// % в свойство key нужно кидать уникальные значения обьектов (id, номер цвета и т.д.)
// % Ключ должен стоять на самом верхнем елементе рендера(например в списке он должен стоять не в компоненте который идет в li, а в самом li)

// @ ---------------------------------------------

// ! children (композиция)
// % В данной разметке компонент PaintingList находиться в пропсе children компонента Section (композиция)
// function App() {
//    return (
//       <div>
//          <Section title={'hello'}>
//             <PaintingList items={paintingEl} />
//          </Section>
//       </div>
//    )
// }

// % Для работы с children существует отдельный API(map,reduce... тут не работает)
